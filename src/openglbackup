    println!("Running");
    let width = 600;
    let height = 600;

    let display = glutin::WindowBuilder::new()
                    .with_dimensions(1024, 768)
                    // .with_title(format!("Hello world"))
                    .with_gl(glutin::GlRequest::Specific(glutin::Api::OpenGl, (2, 1)))
                    .build_glium()
                    .unwrap();

    let mut rows = Vec::with_capacity(height);
    for x in 0..height {
        let row_data = Cow::Owned(vec![1u8, 2u8, 3u8]);
        let row = texture::RawImage1d {data : row_data, width: 3, format: glium::texture::ClientFormat::U8};
        rows.push(row);
    }

    let raw_image = texture::RawImage2d::from_vec_raw1d(&rows);

    let opengl_texture = texture::SrgbTexture2d::new(&display, raw_image).unwrap();

    #[derive(Copy, Clone)]
    struct Vertex {
        position: [f32; 2],
    }

    implement_vertex!(Vertex, position);
    let vertex1 = Vertex { position: [-1.0, -1.0] };
    let vertex2 = Vertex { position: [-1.0,  1.0] };
    let vertex3 = Vertex { position: [ 1.0,  1.0] };
    let vertex4 = Vertex { position: [ 1.0, -1.0] };

    let shape = vec![vertex1, vertex2, vertex3, vertex4];

    let vertex_buffer = glium::VertexBuffer::new(&display, &shape).unwrap();

    // building the index buffer
    let index_buffer = glium::IndexBuffer::new(&display, glium::index::PrimitiveType::TriangleStrip,
                                               &[1 as u16, 2, 0, 3]).unwrap();

    let vertex_shader_src = r#"
        #version 140

        in vec2 position;

        void main() {
            gl_Position = vec4(position, 0.0, 1.0);
        }
    "#;

    let fragment_shader_src = r#"
        #version 140

        out vec4 color;

        void main() {
            color = vec4(1.0, 0.0, 0.0, 1.0);
        }
    "#;

    let program = glium::Program::from_source(&display, vertex_shader_src, fragment_shader_src, None).unwrap();


    loop {
        let uniforms = uniform! {
            matrix: [
                [1.0, 0.0, 0.0, 0.0],
                [0.0, 1.0, 0.0, 0.0],
                [0.0, 0.0, 1.0, 0.0],
                [0.0, 0.0, 0.0, 1.0f32]
            ],
            tex: &opengl_texture
        };

        // drawing a frame
        let mut target = display.draw();
        target.clear_color(0.0, 0.0, 0.0, 0.0);
        target.draw(&vertex_buffer, &index_buffer, &program, &uniforms, &Default::default()).unwrap();
        target.finish().unwrap();

        // polling and handling the events received by the window
        for event in display.poll_events() {
            match event {
                glium::glutin::Event::Closed => break,
                _ => ()
            }
        }
        thread::sleep_ms(5);
    }
